{
  
    
        "post0": {
            "title": "Newton's Laws ",
            "content": "Key Vocabulary . Vocabulary Definition . First Law | An object will remain at rest or in uniform motion in a straight line unless compelled to change its state by the action of an external force. | . Second Law | The acceleration of an object is dependent upon two variables - the net force acting upon the object and the mass of the object. | . Third Law | For every action (force) in nature there is an equal and opposite reaction. | . Center of Mass | A position defined relative to an object or system of objects. It is the average position of all the parts of the system | . Net Force | The vector sum of forces acting on a particle or object. | . Code Demonstration of Concept . class CarLoop { String [][] car; public CarLoop() { car = new String[][]{ { &quot; &quot;, &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot;( _ _ _ &quot;, &quot;=`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; &quot;, &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot; ( _ _ _ &quot;, &quot; =`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; &quot;, &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot; ( _ _ _ &quot;, &quot; =`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, { &quot; &quot;, &quot; ______ &quot;, &quot; /|_||_ `.__ &quot;, &quot; ( _ _ _ &quot;, &quot; =`-(_)--(_)-&#39; &quot;, &quot;===============================================================&quot; }, }; } public void printRace() { System.out.println(); System.out.println(&quot;Newton&#39;s First Law of Motion&quot;); int carPlace = 4; for (int i = carPlace; i &gt;= 1; i--) { System.out.println(i + &quot; cars moving at a constant speed&quot;); System.out.println(i + &quot; cars moving with no external forces&quot;); for (int row = 0; row &lt; carPlace; row++) { for (int col = 0; col &lt; car[row].length; col++) { System.out.println(car[row][col] + &quot; &quot;); } } carPlace -= 1; } } public static void main(String[] args) { new CarLoop().printRace(); } } CarLoop.main(null); . Newton&#39;s First Law of Motion 4 cars moving at a constant speed 4 cars moving with no external forces ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== 3 cars moving at a constant speed 3 cars moving with no external forces ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== 2 cars moving at a constant speed 2 cars moving with no external forces ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== 1 cars moving at a constant speed 1 cars moving with no external forces ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; =============================================================== . Lab Resources . Newton&#39;s Second Law . | Frictional Forces . | . Click here for Calculators .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/11/01/NewtonsLaws.html",
            "relUrl": "/jupyter/2022/11/01/NewtonsLaws.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Kinematics",
            "content": "Key Vocabulary . Vocabulary Definition . Velocity | The rate at which an object changes it&#39;s position | . Acceleration | The rate at which an object&#39;s speed is changing | . Displacement | Vector quantity that is an object&#39;s overall change in position | . Distance | How far an object has moved; positive or negative | . Vectors | Have both magnitude and direction | . Scalars | Only magnitude (no direction) | . Gravitational Constant | 9.8 m/s^2 | . g# Key Equations . Lab Resources . Motion in 1D Lab | Projectile Motion | . Click to view Calculators .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/11/01/Kinematics.html",
            "relUrl": "/jupyter/2022/11/01/Kinematics.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Gravitation",
            "content": "Key Vocabulary . Vocabulary Definition . Universal Law of Gravitation | Force of gravitational attraction between the Earth and other objects is inversely proportional to the distance separating the earth&#39;s center from the object&#39;s center. | . Centripetal Acceleration | Any object moving in a circle will have an acceleration vector pointed towards the center of the circle. | . Inverse Square Law | Power intensity per unit area from point source. If sun rays strike the surface of a planet at a right angle, varies inversely according to the square of the distance from the source. | . Free Fall | Gravity is the only force acting on an object. | . Key Equation . Lab Resources . Kepler&#39;s Laws . | My Solar System . | . Click here for Calculators .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/11/01/Gravitation.html",
            "relUrl": "/jupyter/2022/11/01/Gravitation.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "GUI Notebook",
            "content": "import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Mean and Median&quot;, &quot;Potential Energy&quot;, &quot;Fahrenheit to Celsius&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { action1(start_msg, end_msg); } else if ( selection.equals(MENUS[1]) ) { public void action2(String start_msg, String end_msg) { String msg; int fahrenheit1: 60; double celsius1 = (fahrenheit1-32)*(5/9); msg = start_msg; msg += &quot;The degree in fahrenheit is &quot; + fahrenheit1 +&quot; and in celsius it is &quot;+ celsius1 +&quot;&quot;; msg += end+msg; } } else { } } public void action1(String start_msg, String end_msg) { String msg; int data1 = 1; int data2 = 2; int data3 = 3; double mean = (double) (data1 + data2 + data3) / 3; int median = data2; msg = start_msg; msg += &quot;The data is &quot; + data1 + &quot;, &quot; + data2 + &quot;, &quot; + data3 + &quot;.&lt;br&gt;The mean is &quot; + mean + &quot;. The median is &quot; + median + &quot;.&quot;; msg += end_msg; message.setText(msg); } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . | public void action2(String start_msg, String end_msg) { illegal start of expression | int fahrenheit1: 60; &#39;;&#39; expected .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/11/01/GUImenu.html",
            "relUrl": "/jupyter/2022/11/01/GUImenu.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Github and Git Sociology",
            "content": "Hacks . What is the main repository for your project? | Our main repository is created on Github that we all have access to through cloning the repository. The link is here: https://github.com/bgt072105/CSA-tri1-teamrepo . Did you create a .gitignore to avoid committing files that ‘don’t belong in version control? | Yes we did create this file. This configuration file is useful for us to not push files that we don&#39;t want in our repository. Below is a screenshot of our file . . Have you established Issues as part of your Development process? | Yes, we establish issues to organize and assign tasks to our group members. These issues allow us to check off tasks that we have finished and also see our group members&#39; progress. . Check out our issues page here: https://github.com/bgt072105/CSA-tri1-teamrepo/issues . Have you considered making Pull Requests to track development? | We are going to use pull requests as we start working on code development of our website. For example, Brian is backend developer. He will write the code and establish a pull request that Ellen, as the frontend developer, can then either accept or reject through a pull request. . Have you considered forks or branching techniques with pull requests? | Yes we will do this once we start the codes . Are you managing Issues on a Project Board/Scrum Board like Kanban? | Yes we created a scrum board that allows us to drag accomplished tasks through issues and also assign new issues to people. .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/10/06/GithubSociology.html",
            "relUrl": "/jupyter/2022/10/06/GithubSociology.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "PBL 2nd Approval",
            "content": "Goal . Our goal is to make sure each person gets to apply different learnings from CSA to our website. Based on our strengths and weaknesses, we have talked about what each team member can focus on. . Task graphic . .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/10/02/SecondApproval.html",
            "relUrl": "/jupyter/2022/10/02/SecondApproval.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "PBL Project",
            "content": "PBL Idea . We want to create an interactive website based on the AP Physics Mechanics and Electricity and Magnetism curriculum. We envision our website to have spaces for user-friendly calculators, videos that we can create and input, and also interactive simulations similar to Colorado&#39;s PHET environment. . Brain Write . Calculators for electric force, potential energy, torque, etc. . | Make videos with us teaching the concepts to enhance our own learning . | Incorporate learnings from Crash White (a Physics Page) and other physics platforms that aren&#39;t user friendly . | Could talk to Mr. Liao and Mr. Millman to hear more suggestions on what to include . | Include labs and write ups . | Reasons why we want to do this project: . We have taken AP Physics and have learned to navigate through the course ourselves because of the lack of resources present | We want to help other students have an easier time learning the challenging class material | Although there are resources on Google to learn Physics, it&#39;s easier to have a user-friendly platform with resources all easily accessible for students | Useful for self teaching | . | . Wire Frame . . . .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/09/26/PBLProject.html",
            "relUrl": "/jupyter/2022/09/26/PBLProject.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Methods in Java",
            "content": "What is a Method? . Function or sub-code that is associated with a class in object-oriented programming | Can contain a set of codes that performs an action | It can also take an input and return an output based on the user | Runs only when called | . Creating a Method . A method is created within a class | It is defined with the name, followed by () | An example of a Java pre-defined method is System.out.println() | . Calling a Method . With Java, you can call a method by writing the method&#39;s name and then having (); after it | . Example Code . public class Example { public static void hello () { System.out.println(&quot;Hi Class! How are you?&quot;); } // here, we defined the method called &quot;hello,&quot; that we can later refer to and execute the code public static void main(String[] args) { Example myExample = new Example(); myExample.hello(); } // we called the method through the .hello(); } Example.main(null); . Hi Class! How are you? . Hack 1 . Fill in the missing code | . static void myMethod() { System.out.println(&quot;Code is executed!&quot;); } public static void main(String[] args) { __________________ } . Hack 2 . Describe what the method does | . class Main { // create a method public int addNumbers(int a, int b) { int sum = a + b; // return value return sum; } public static void main(String[] args) { int num1 = 25; int num2 = 15; // create an object of Main Main obj = new Main(); // calling method int result = obj.addNumbers(num1, num2); System.out.println(&quot;Sum is: &quot; + result); } } . Answers to the Hacks . &quot;myMethod()&quot; | The code created a method called addNumbers() that takes two parameters, a and b. The method is called and then a sum is outputted. | Additional Resources . Videos: . https://www.youtube.com/watch?v=_rsKeFaGx48&amp;ab_channel=Udacity | https://www.youtube.com/watch?v=67ci2FvaY6o&amp;ab_channel=DonWoodlock | . More Practice Questions: . https://www.khanacademy.org/computing/computer-programming/programming | .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/09/19/Methods.html",
            "relUrl": "/jupyter/2022/09/19/Methods.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Control Structures in Java",
            "content": "Overview to Control Structures . Programming blocks that can change the path taken to complete a set of instructions | Three kinds of structures: Conditional branches, Loops, and Branching Statements | Conditional Branches are used for choosing between two or more paths: if/else/else if and switch case | Loops are used to sift through different objects and run loops of specific codes: for, while, and do while | Branching Statements are used to change the process of loops: break and continue | . . If/Else/Else If . We used this when we make our own learnings last week about if/else statements and Boolean expressions . | If/Else chooses between two paths . | Else if goes through multiple conditions until one is true . | . int count = 4; if (count &gt; 6) { System.out.println(&quot;Count is higher than 6&quot;); } else { System.out.println(&quot;Count is lower or equal than 6&quot;); } . Count is lower or equal than 6 . int count = -4; if (count &gt; 6) { System.out.println(&quot;Count is higher than 6&quot;); } else if (count &lt; 0) { System.out.println(&quot;Count is negative&quot;); } else { System.out.println(&quot;Count is between 0 and 6&quot;); } . Count is negative . Ternary Operator . Takes three operands rather than one or two . | Shorter way to write an if else code; uses a question mark . | . System.out.println(count &gt; 6 ? &quot;Count is higher than 6&quot; : &quot;Count is lower or equal than 6&quot;); . Switch case . If-else ladder that checks multiple conditions at once | Value inputted is checked with each given case until a match is found | Things to remember: two cases can&#39;t have the same value, data variable needs to be the same in all cases, and the value needs to be literal or constant not a variable. | . import java.util.Scanner; public class SwitchExample { // sets up class and objects for scanner public void go() { Scanner scan = new Scanner(System.in); int score = scan.nextInt(); switch (score){ // switch statement with condition that goes through different cases to find a match case 1: // for the score of less than 60 System.out.println(&quot;You got an F&quot;); break; case 2: // for the score between 60 and 70 System.out.println(&quot;You got a D&quot;); break; case 3: // for a score between 70 and 80 System.out.println(&quot;You got a C&quot;); break; case 4: // for a score between an 80 and a 90 System.out.println(&quot;You got a B&quot;); break; case 5: // for a score between a 90 and 100 System.out.println(&quot;You got an A&quot;); break; default: // if none of the cases are a match, this is what will be the code automatically executed System.out.println(&quot;You didn&#39;t even get a grade&quot;); } } public static void main(String[] args) { SwitchExample cond = new SwitchExample(); cond.go(); } } SwitchExample.main(null); . You didn&#39;t even get a grade . Loops . Used to repeat a code multiple times . | We can set the number of times we want the code to be repeated . | . for (int i = 5; i &lt;= 90; i++) { methodToRepeat(); } int whileCounter = 5; while (whileCounter &lt;= 90) { methodToRepeat(); whileCounter++; } . Break and Continue . A break is used to leave a loop earlier than expected | A continue is used to skip a loop we were already in | . List&lt;String&gt; names = getNameList(); String name = &quot;Group 3&quot;; int index = 0; for ( ; index &lt; names.length; index++) { if (names[index].equals(name)) { break; } } // Using a list of groups to find one in specific. When we find Group 3, the code will &quot;break&quot; or stop. . List&lt;String&gt; names = getNameList(); String name = &quot;Group 3&quot;; String list = &quot;&quot;; for (int i = 0; i &lt; names.length; i++) { if (names[i].equals(name)) { continue; } list += names[i]; } // Here, if Group 3 is identified, this code will stop and the program will move on to the next; it will &quot;continue&quot; . Hacks . What&#39;s the difference between an if/elseif/else statement and a switch case? What&#39;s the pros and cons of each? | How can you stop a loop from repeating and then start it again? | How can a ternary operator shorten an if statement? | .",
            "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/jupyter/2022/09/19/ControlStructure.html",
            "relUrl": "/jupyter/2022/09/19/ControlStructure.html",
            "date": " • Sep 19, 2022"
        }
        
    
  

  
  

  

  

  
      ,"page3": {
          "title": "Gravitation Calculators",
          "content": "&lt;!DOCTYPE html&gt; . Gravitational Calculators . Gravitation Calculator &lt;/h1&gt; . Mass 1: Mass 2: Radius: Fg: &lt;/html&gt; .",
          "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/gravitationcalculator/",
          "relUrl": "/gravitationcalculator/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Kinematics Calculator",
          "content": "&lt;!DOCTYPE html&gt; . Kinematics Calculator . Final Velocity Calculator &lt;/h1&gt; . Initial Velocity: Acceleration: Time: Final Velocity: Displacement Calculator &lt;/h1&gt; . Initial Velocity: Final Velocity: Time: Displacement: Baby Equation Calculator &lt;/h1&gt; . Displacement: Time: Velocity: &lt;/html&gt; .",
          "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/kinematicscalculator/",
          "relUrl": "/kinematicscalculator/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Newton's Laws",
          "content": "&lt;!DOCTYPE html&gt; . Newton&#39;s Laws Calculator . Net Force Calculator &lt;/h1&gt; . Force 1: Force 2: Force 3: Sum of Forces: Acceleration Calculator&lt;/h1&gt; . Net force: Mass of object: Acceleration: Newton&#39;s Law Video &lt;/h1&gt; . &lt;/html&gt; .",
          "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/newtonscalculator/",
          "relUrl": "/newtonscalculator/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bgt072105.github.io/CSA-tri1-teamrepo/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}